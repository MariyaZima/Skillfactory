Создать двух пользователей (с помощью метода User.objects.create_user('username')).

	python manage.py shell
	from news.models import *
	
	user1 = User.objects.create(username = 'user_1') 
	user2 = User.objects.create(username = 'user_2') 

Создать два объекта модели Author, связанные с пользователями.

	Author.objects.create(user = user1)
	Author.objects.create(user = user2)

Добавить 4 категории в модель Category.

	Category.objects.create(name='Category_1')
	Category.objects.create(name='Category_2')
	Category.objects.create(name='Category_3')
	Category.objects.create(name='Category_4')


Добавить 2 статьи и 1 новость.

	au1 = Author.objects.get(id=1)
	au2 = Author.objects.get(id=2)

	Post.objects.create(author = au1, field_choice = 'AR', title = 'article_1', content = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.')
	Post.objects.create(author = au1, field_choice = 'AR', title = 'article_2', content = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.')
	Post.objects.create(author = au2, field_choice = 'NE', title = 'new_1', content = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.')

Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

	Post.objects.get(id=1).many_to_many_relation.add(Category.objects.get(id=1)) 
	Post.objects.get(id=1).many_to_many_relation.add(Category.objects.get(id=3))
	Post.objects.get(id=2).many_to_many_relation.add(Category.objects.get(id=4))

Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

	Comment.objects.create(comment_post=Post.objects.get(id=1), comment_user=Author.objects.get(id=1).user, comment_text='Lorem ipsum dolor sit amet, consectetur adipiscing eli')
	Comment.objects.create(comment_post=Post.objects.get(id=1), comment_user=Author.objects.get(id=2).user, comment_text='Lorem ipsum dolor sit amet, consectetur adipiscing eli')
	Comment.objects.create(comment_post=Post.objects.get(id=2), comment_user=Author.objects.get(id=1).user, comment_text='Lorem ipsum dolor sit amet, consectetur adipiscing eli')
	Comment.objects.create(comment_post=Post.objects.get(id=2), comment_user=Author.objects.get(id=2).user, comment_text='Lorem ipsum dolor sit amet, consectetur adipiscing eli')


Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

	Post.objects.get(id=1).like()
	Post.objects.get(id=1).dislike()
	Post.objects.get(id=2).like()
	Post.objects.get(id=2).dislike()

	Comment.objects.get(id=1).like()
	Comment.objects.get(id=1).dislike()
	Comment.objects.get(id=2).like()
	Comment.objects.get(id=2).dislike()

	Comment.objects.get(id=3).like()
	Comment.objects.get(id=3).dislike()
        
	Проверка рейтинга комментария
	Comment.objects.get(id=1).comment_rating
	
	Проверка рейтинга поста
	Post.objects.get(id=1).rating_art_new

Обновить рейтинги пользователей.

	a1 = Author.objects.get(id=1)
	a1.update_rating()

Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

	a1.rating
	a1.post_set.all().values('rating')
	a1.user.comment_set.all().values('rating')


	a2 = Author.objects.all().order_by('-rating')[:1] 
	a2
	for b in a2:
		b.user.username
		b.rating	

Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

	a3 = Post.objects.all().order_by('-rating')[:1]
	for j in a3:
		f"Data : {j.datetime.day}"
		f"Rating: {j.rating}"
		j.author.user
		j.content
		j.preview()

Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

	a4 = Comment.objects.all().filter(comment_post=a3)

	for d in a4:
		F"Data : {d.datetime.day}/{d.datetime.month}/{d.datetime.year}"
		d.comment_user
		F"Rating : {d.rating}"
		d.comment_text